{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","globalCases","canadaCases","axios","method","url","dataResponse","then","response","console","log","data","Global","Countries","globalData","canadaData","prop","toLocaleString","setState","className","this","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SAyEeA,E,kDAnEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,YAAa,GACbC,YAAa,IAJP,E,gEAOO,IAAD,OAChBC,IAAM,CACFC,OAAQ,MACRC,IAAK,qCACLC,aAAc,SACfC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAASG,KAAKC,QAC1BH,QAAQC,IAAIF,EAASG,KAAKE,UAAU,KAMpC,IAAMC,EAAaN,EAASG,KAAKC,OAC3BG,EAAaP,EAASG,KAAKE,UAAU,IAC3C,IAAK,IAAIG,KAAQF,EACbA,EAAWE,GAAQF,EAAWE,GAAMC,iBAExC,IAAK,IAAID,KAAQD,EACbA,EAAWC,GAAQD,EAAWC,GAAMC,iBAExC,EAAKC,SAAS,CACVjB,YAAaa,EACbZ,YAAaa,S,+BAKrB,OAGI,6BAEI,gDACA,6BAASI,UAAU,WACf,yBAAKA,UAAU,UACX,4CACA,6CAAkB,8BAAOC,KAAKpB,MAAMC,YAAYoB,eAChD,0CAAe,8BAAOD,KAAKpB,MAAMC,YAAYqB,YAC7C,6CAAkB,8BAAOF,KAAKpB,MAAMC,YAAYsB,eAChD,+CAAoB,8BAAOH,KAAKpB,MAAMC,YAAYuB,iBAClD,4CAAiB,8BAAOJ,KAAKpB,MAAMC,YAAYwB,cAC/C,+CAAoB,8BAAOL,KAAKpB,MAAMC,YAAYyB,kBAEtD,yBAAKP,UAAU,UACX,8CACA,6CAAkB,8BAAOC,KAAKpB,MAAME,YAAYmB,eAChD,0CAAe,8BAAOD,KAAKpB,MAAME,YAAYoB,YAC7C,6CAAkB,8BAAOF,KAAKpB,MAAME,YAAYqB,eAChD,+CAAoB,8BAAOH,KAAKpB,MAAME,YAAYsB,iBAClD,4CAAiB,8BAAOJ,KAAKpB,MAAME,YAAYuB,cAC/C,+CAAoB,8BAAOL,KAAKpB,MAAME,YAAYwB,wB,GA5DxDC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.fc7ccc00.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            globalCases: {},\n            canadaCases: {},\n        }\n    }\n    componentDidMount() {\n        axios({\n            method: 'GET',\n            url: 'https://api.covid19api.com/summary',\n            dataResponse: 'json',\n        }).then(response => {\n            console.log(response);\n            console.log(response.data.Global);\n            console.log(response.data.Countries[30]);\n            // const casesArray = [];\n            // for (let prop in response.data.Global) {\n            //     casesArray.push(response.data.Global[prop]);\n            // }\n            // console.log(casesArray);\n            const globalData = response.data.Global;\n            const canadaData = response.data.Countries[30];\n            for (let prop in globalData) {\n                globalData[prop] = globalData[prop].toLocaleString();\n            }\n            for (let prop in canadaData) {\n                canadaData[prop] = canadaData[prop].toLocaleString();\n            }\n            this.setState({\n                globalCases: globalData,\n                canadaCases: canadaData,\n            })\n        })\n    }\n    render() {\n        return (\n        //   <div className=\"App\">\n        //   </div>\n            <div>\n                {/* check header wrapper */}\n                <h1>Covid-19 Tracker</h1>\n                <section className=\"wrapper\">\n                    <div className=\"global\">\n                        <h2>Global Cases</h2>\n                        <p>New Confirmed: <span>{this.state.globalCases.NewConfirmed}</span></p>\n                        <p>New Deaths: <span>{this.state.globalCases.NewDeaths}</span></p>\n                        <p>New Recovered: <span>{this.state.globalCases.NewRecovered}</span></p>\n                        <p>Total Confirmed: <span>{this.state.globalCases.TotalConfirmed}</span></p>\n                        <p>Total Deaths: <span>{this.state.globalCases.TotalDeaths}</span></p>\n                        <p>Total Recovered: <span>{this.state.globalCases.TotalRecovered}</span></p>\n                    </div>\n                    <div className=\"canada\">\n                        <h2>Canadian Cases</h2>\n                        <p>New Confirmed: <span>{this.state.canadaCases.NewConfirmed}</span></p>\n                        <p>New Deaths: <span>{this.state.canadaCases.NewDeaths}</span></p>\n                        <p>New Recovered: <span>{this.state.canadaCases.NewRecovered}</span></p>\n                        <p>Total Confirmed: <span>{this.state.canadaCases.TotalConfirmed}</span></p>\n                        <p>Total Deaths: <span>{this.state.canadaCases.TotalDeaths}</span></p>\n                        <p>Total Recovered: <span>{this.state.canadaCases.TotalRecovered}</span></p>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}