{"version":3,"sources":["Display.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","prop","globalData","toLocaleString","updatedDateTime","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","countryData","length","Date","parse","month","day","year","hour","minute","timeZoneName","className","Country","Form","handleChange","event","setState","userSelection","target","value","state","onClick","htmlFor","onChange","this","name","id","countrySelection","map","index","key","Component","App","getUserSelection","userChoice","selectedCountry","countryCases","filter","country","globalCases","countryList","axios","method","url","dataResponse","then","response","countryCollection","data","Countries","push","Global","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6708f38c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Display = props => {\n    for (let prop in props.globalData) {\n        props.globalData[prop] = props.globalData[prop].toLocaleString();\n    }\n\n    const { NewConfirmed, NewDeaths, NewRecovered, TotalConfirmed, TotalDeaths, TotalRecovered } = props.globalData;\n\n    let updatedDateTime;\n    if (props.countryData.length !== 0) {\n        const options = { month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', timeZoneName: 'short' };\n        updatedDateTime = (new Date(Date.parse((props.countryData[0].Date)))).toLocaleString('en-CA', options);\n    }\n\n    return (\n        <section className=\"wrapper\">\n            {\n                props.countryData.length === 0\n                    ? <div className=\"cases\">\n                        <h2>Global Cases</h2>\n                        <p className=\"confirm\">New Confirmed: <span>{NewConfirmed}</span></p>\n                        <p className=\"death\">New Deaths: <span>{NewDeaths}</span></p>\n                        <p className=\"recover\">New Recovered: <span>{NewRecovered}</span></p>\n                        <p className=\"confirm\">Total Confirmed: <span>{TotalConfirmed}</span></p>\n                        <p className=\"death\">Total Deaths: <span>{TotalDeaths}</span></p>\n                        <p className=\"recover\">Total Recovered: <span>{TotalRecovered}</span></p>\n                      </div>\n                    : <div className=\"cases\">\n                        <h2>{props.countryData[0].Country}<span>Last Updated: {updatedDateTime}</span></h2>\n                        <p className=\"confirm\">New Confirmed: <span>{props.countryData[0].NewConfirmed.toLocaleString()}</span></p>\n                        <p className=\"death\">New Deaths: <span>{props.countryData[0].NewDeaths.toLocaleString()}</span></p>\n                        <p className=\"recover\">New Recovered: <span>{props.countryData[0].NewRecovered.toLocaleString()}</span></p>\n                        <p className=\"confirm\">Total Confirmed: <span>{props.countryData[0].TotalConfirmed.toLocaleString()}</span></p>\n                        <p className=\"death\">Total Deaths: <span>{props.countryData[0].TotalDeaths.toLocaleString()}</span></p>\n                        <p className=\"recover\">Total Recovered: <span>{props.countryData[0].TotalRecovered.toLocaleString()}</span></p>\n                      </div>\n            }\n        </section>\n    )\n}\n\nexport default Display;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userSelection: \"\"\n        }\n    }\n    handleChange = event => {\n        this.setState({\n            userSelection: event.target.value\n        })\n    }\n    render() {\n        return (\n            <form onClick={() => this.props.userSelection(this.state.userSelection)} className=\"wrapper\">\n                <label htmlFor=\"country\">Select a country to view cases:</label>\n                <select onChange={this.handleChange} name=\"country\" id=\"country\">\n                    {\n                        this.props.countrySelection.map((value, index) => {\n                            return <option key={index} value={value}>{value}</option>\n                        })\n                    }\n                </select>\n            </form>\n        )\n    }\n}\n \nexport default Form;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Display from './Display';\nimport Form from './Form';\nimport './style.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            globalCases: {},\n            countryCases: [],\n            countryList: [],\n            userSelection: [],\n        }\n    }\n    componentDidMount() {\n        axios({\n            method: 'GET',\n            url: 'https://api.covid19api.com/summary',\n            dataResponse: 'json',\n        }).then(response => {\n            // console.log(response);\n            const countryCollection = ['Global'];\n            for (let index = 0; index < response.data.Countries.length; index++) {\n                countryCollection.push(response.data.Countries[index].Country);\n            }\n            this.setState({\n                globalCases: response.data.Global,\n                countryCases: response.data.Countries,\n                countryList: countryCollection,\n            })\n        })\n    }\n    getUserSelection = userChoice => {\n        const selectedCountry = this.state.countryCases.filter(country => {\n            return userChoice === country.Country;\n        })\n        this.setState({\n            userSelection: selectedCountry\n        })\n    }\n    render() {\n        return (\n            <Fragment>\n                <header>\n                    <h1 className=\"wrapper\">Covid-19 Tracker</h1>\n                </header>\n\n                <Display globalData={this.state.globalCases} countryData={this.state.userSelection}/>\n                <Form countrySelection={this.state.countryList} userSelection={this.getUserSelection}/>\n\n                <footer>\n                    <div className=\"wrapper\">\n                        <p>Data provided by <a href=\"https://covid19api.com/\" target=\"_blank\" rel=\"noopener noreferrer\">covid 19 api</a>. Created by Rahat Rahman, 2020.</p>\n                    </div>\n                </footer>\n            </Fragment>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}